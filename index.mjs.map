{"version":3,"file":"index.mjs","sources":["../lib/weights.js","../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport memoize from '@stdlib/utils-memoize' ;\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\n\nexport default memoized;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer' ;\nimport isfinite from '@stdlib/math-base-assert-is-finite' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport exp from '@stdlib/math-base-special-exp' ;\nimport ln from '@stdlib/math-base-special-ln' ;\nimport LN2 from '@stdlib/constants-float64-ln-two' ;\nimport weights from './weights.js' ;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {Probability} evaluated PDF\n*\n* @example\n* var y = pdf( 7.0, 9 );\n* // returns ~0.01\n*\n* @example\n* var y = pdf( 7.0, 6 );\n* // returns ~0.063\n*\n* @example\n* var y = pdf( -1.0, 40 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, -1 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.8 );\n* // returns NaN\n*/\nfunction pdf( x, n ) {\n\tvar mlim;\n\tif (\n\t\tisnan( x ) ||\n\t\t!isPositiveInteger( n ) ||\n\t\t!isfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tmlim = ( n * ( n + 1 ) ) / 2;\n\tif ( x < 0.0 || x > mlim ) {\n\t\treturn 0.0;\n\t}\n\treturn exp( ln( weights( x, n ) ) - ( n * LN2 ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport isfinite from '@stdlib/math-base-assert-is-finite' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport exp from '@stdlib/math-base-special-exp' ;\nimport ln from '@stdlib/math-base-special-ln' ;\nimport LN2 from '@stdlib/constants-float64-ln-two' ;\nimport weights from './weights.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for the distribution of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 8 );\n* var y = pdf( 4.0 );\n* // returns ~0.008\n*\n* y = pdf( 17.0 );\n* // returns ~0.051\n*/\nfunction factory( n ) {\n\tvar mlim;\n\tif ( !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for the distribution of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > mlim ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn exp( ln( weights( x, n ) ) - ( n * LN2 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-signrank-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-signrank-pdf' ;\n*\n* var y = pdf( 7.0, 9 );\n* // returns ~0.01\n*\n* var mypdf = pdf.factory( 8 );\n* y = mypdf( 4.0 );\n* // returns ~0.008\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["memoized","weights$1","memoize","x","n","mlim","pdf","isnan","isPositiveInteger","isfinite","exp","ln","weights","LN2","NaN","factory","constantFunction","setReadOnly","main"],"mappings":";;20BA2BA,IAAIA,EAqCJ,IAAAC,EALAD,EAAWE,GAnBX,SAAkBC,EAAGC,GACpB,IAAIC,EAEJ,OAAW,IAAND,EACW,IAAND,EAAY,EAAI,GAE1BE,EAAOD,GAAMA,EAAI,GAAM,EAClBD,EAAI,GAAKA,EAAIE,EACV,GAEHF,EAAIE,EAAO,IACfF,EAAIE,EAAOF,GAELH,EAAUG,EAAIC,EAAGA,EAAI,GAAMJ,EAAUG,EAAGC,EAAI,QCepD,SAASE,EAAKH,EAAGC,GAEhB,OACCG,EAAOJ,IACNK,EAAmBJ,IACnBK,EAAUL,GAKPD,EAAI,GAAOA,EADPC,GAAMA,EAAI,GAAQ,EAEnB,EAEDM,EAAKC,EAAIC,EAAST,EAAGC,IAAUA,EAAIS,GANlCC,IC3BT,SAASC,EAASX,GACjB,IAAIC,EACJ,OAAMG,EAAmBJ,IAAQK,EAAUL,IAG3CC,EAAOD,GAAMA,EAAI,GAAM,EAcvB,SAAcD,GACb,GAAKI,EAAOJ,GACX,OAAOW,IAER,GAAKX,EAAI,GAAOA,EAAIE,EACnB,OAAO,EAER,OAAOK,EAAKC,EAAIC,EAAST,EAAGC,IAAUA,EAAIS,KAvBnCG,EAAkBF,KCN3BG,EAAAC,EAAA,UAAAH"}